observeOn() is for selecting the thread for computation and any other stuff

subscribeOn()  = on which thread subscription block listens to observable.

you may want to do computations on the computation threads and
display the results from the io threads, which actually you should do. The subscribeOn
operator requires a companion for all these things; while it'll specify the thread for the
entire subscription, it requires its companion to specify threads for specific operators.

Very Important
The perfect companion to the subscribeOn operator is the observeOn operator. The
observeOn operator specifies the scheduler for all the operators called after it.

A very Good Example

fun main(args: Array<String>) {
listOf("1","2","3","4","5","6","7","8","9","10")
.toObservable()
.observeOn(Schedulers.computation())//(1)
.map {
item->println("Mapping $item - ${Thread.currentThread().name}")
return@map item.toInt()
}
.observeOn(Schedulers.io())//(2)
.subscribe {
item -> println("Received $item -
${Thread.currentThread().name}")
}
runBlocking { delay(1000) }
}